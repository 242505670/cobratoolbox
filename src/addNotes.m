function [map] = addNotes(model, map)

% Function to add notes from a model to a metabolic map
%
% USAGE:
%
%   noted_map = addNotes(model, map)
%
% INPUT:
%
%   model:          COBRA model
%
%   map:            A parsed model structure generated by 
%                   'transformXML2MatStruct' function
%
% OUPUT:
%
%   new_map:        Modified map containing notes from the model
%
% .. Authors:
% A.Danielsdottir 20/07/2017 LCSB. Belval. Luxembourg.
% N.Sompairac - Institut Curie, Paris, 20/10/2017.

    % Add metabolites notes 
    % Abbreviation: h2o ChargedFormula: H2O Charge: 0 Name: Water 
    % Information to add 
    a = 'Full name:';
    b = 'Abbreviation:';
    c = 'Formula:';
    d = 'Charge:';
    e = 'Descrition:';
    f = 'Annotations:';

    % Find only metabolites ( no subsystems added as a unknown metabolite) 
    listmets = strfind(map.specName, ']'); 
    index= ~cellfun(@isempty, listmets);
    listmets=map.specName(index,1);
    % Obtain abbreviation of each metabolite (split the indicator of
    % compartment) 
    G = regexp(listmets,'[','split');
    
    for i = 1:length(G)
        G2 = G{i,1};
        abbreviation(i,1) = G2(1);
    end 
 
    for i = 1:length(listmets)
        met = listmets(i);
        idx_model = find(ismember(model.mets,met));
        idx_map = find(ismember(map.specName,met));
        
        % Avoid possible errors. Have into account possible extra IDs
        % for same metabolite (this shouldn't be)...
        if length(idx_map) > 1
            for v = 1:length(idx_map)
                idx = idx_map(v);
                metAbbreviation = abbreviation{i};
                metName = char(model.metNames{idx_model});
                metFormula = char(model.metFormulas(idx_model));
                metCharge = num2str(model.metCharge(idx_model));
                summary = [a metName b metAbbreviation c metFormula d metCharge e f];
                map.specNotes{idx,1} = [map.specNotes{idx} newline summary];
            end
        else
            metAbbreviation = abbreviation{i};
            metName = char(model.metNames(idx_model));
            metFormula = char(model.metFormulas(idx_model));
            metCharge = num2str(model.metCharge(idx_model));
            summary = [a metName b metAbbreviation c metFormula d num2str(metCharge) e f];
            map.specNotes{idx_map,1} = [map.specNotes{idx_map} newline summary];
        end
    end
    
    % Add reactions notes
    g = 'Formula: ';
    h = 'Mechanical Confidence Score: ';
    k = 'Lower Bound: ';
    l = 'Upper Bound: ';
    m = 'Subsystem: ';
    n = 'Description: Type';

    listRxns = map.rxnName;
    Formula = printRxnFormula(model,listRxns);
    
    for j = 1:length(listRxns)
        rxn = listRxns(j);
        idx_model = find(ismember(model.rxns,rxn));
        formula = Formula{j};
        score = char(model.rxnConfidenceScores(idx_model));
        lower = num2str(model.lb(idx_model));
        upper = num2str(model.ub(idx_model));
        sub = char(model.subSystems(idx_model));
        type = char(map.rxnType{j});       
        summary = [g,formula,h,score,k,lower,l,upper,m,sub,n,type];
        disp(summary)
        map.rxnNotes{j,1} = [map.rxnNotes{j},newline,summary];
    end

end