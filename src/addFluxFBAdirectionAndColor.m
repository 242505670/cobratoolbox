function [map, Flux2, fluxMap] = addFluxFBAdirectionAndColor(map, model, FBAsolution)

% Change reactions type for a specific list of reactions 
%
% INPUTS:
%   map:          A parsed model structure generated by 
%                 'transformXML2MatStruct' function
%
%   model:        A COBRA model 
%
%   FBAsolution:  structure obtain from Flux balance analysis 
%
% OUTPUT:
%
%   map:          mew parsed file with the changes in the reactions   
%   Flux:         fluxes and normalized fluxes through all rxns 
%   fluxMap:      list of reactions carrying flux in the map + width value 
%     
% .. Author: J.Modamio. LCSB, Belval, Luxembourg, 18/07/2017.

    % Call function to give color name instead color code
    Colors = Create_colors_map;

    % Obtain fluxes in the map from FBA solution
    Flux = FBAsolution.v;
    idx = find(Flux);
    rxn = model.rxns(idx,1);

    % Obtain list of reaction carrying fluxes and the value
    Flux2 = [rxn,num2cell(Flux(idx,1))];

    % Normalize fluxes to give width
    flux2(:,1)= FBAsolution.v;
    
    % Normalise the flux values
    absFlux=abs(flux2);
    rxnWidth=absFlux/max(absFlux);
    
    % Normalize the values in the descending order
    rxnWidth(rxnWidth>=1)=8;   
    rxnWidth(rxnWidth>0.8 & rxnWidth<1)=6;
    rxnWidth(rxnWidth>0.5 & rxnWidth<=0.8)=5;
    rxnWidth(rxnWidth>0.2 & rxnWidth<=0.5)=4;
    rxnWidth(rxnWidth>1e-3 & rxnWidth<=0.2)=3;
    rxnWidth(rxnWidth<1e-3)=1;
    
    % Normalized values
    normalizedFlux=model.rxns;
    normalizedFlux(:,2)= num2cell(rxnWidth(:,1));

    Flux2 = [Flux2 num2cell(rxnWidth(idx,1))];
    % Add specific width to each reaction in the map based on the fluxes
    for i = 1:length(map.rxnName)
        a = find(ismember(model.rxns,map.rxnName{i}));
        if isempty(a)
            map.rxnWidth{i} = 1;
        else
            map.rxnWidth{i} = rxnWidth(a);
        end
    end

    fluxMap = [map.rxnName map.rxnWidth];

    % Unify the map. color nodes to white and reactions to grey 
    % color lighter those reactions without flux
    % Find rxn without flux 
    id = Flux==0;
    rx = model.rxns(id,1);
    % Find non-zeros elements 
    index2 = ismember(map.rxnName,rx);
    % Color all reactions without flux
    map.rxnColor(index2,1) = {Colors('LIGHTGRAY')};
    
    % Change all nodes color to white 
    for i = 1:length(map.molColor)
        map.molColor(i,1) = {Colors('WHITE')};
    end 

    % Find rxns carring negative flux (metabolites are being uptaken) and give color 
    % Give red color to reactions with negative fluxes (uptaken metabolites,
    % reactants) 
    negative = find(FBAsolution.v <0);
    negativeRxn = model.rxns(negative,1);
    index2 = find(ismember(map.rxnName,negativeRxn)); 
    map.rxnColor(index2,1) = {Colors('TOMATO')};

    % Give red color to metabolites being uptaken by the model 
    % Change colour base reactants 
    baseR = map.rxnBaseReactantAlias(index2,1);
    for i = 1:length(baseR) 
        a = baseR{i};
        id = ismember(map.molAlias,a);
        map.molColor(id,1) = {Colors('TOMATO')};
    end
    
    % Change color of secondary reactants 
    react = map.rxnReactantAlias(index2,1);
    for i = 1:length(react) 
        a = react{i};
        id = ismember(map.molAlias,a);
        map.molColor(id,1) = {Colors('TOMATO')};
    end
    
    % Find rxns carring positive flux (metabolites being produced or secreted) and give color 
    % Give red color to reactions with positive fluxes (secreted metabolites, products ) 
    positive = find(FBAsolution.v > 0);
    positiveRxn = model.rxns(positive,1);
    index2 = find(ismember(map.rxnName,positiveRxn)); 
    map.rxnColor(index2,1) = {Colors('DARKTURQUOISE')};

    % Give red color to metabolites being uptaken by the model 
    % Change colour base reactants 
    baseP = map.rxnBaseProductAlias(index2,1);
    for i = 1:length(baseP) 
        a = baseP{i};
        id = ismember(map.molAlias,a);
        map.molColor(id,1) = {Colors('DARKTURQUOISE')};
    end
    
    % Change color of secondary reactants 
    product = map.rxnProductAlias(index2,1);
    for i = 1:length(product) 
        a = product{i};
        id = ismember(map.molAlias,a);
        map.molColor(id,1) = {Colors('DARKTURQUOISE')};
    end

end