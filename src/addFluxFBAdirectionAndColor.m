function [map,Flux2,fluxMap] = addFluxFBAdirectionAndColor(map,model,FBAsolution)

% change reactions type for a specific list of reactions 
%
% INPUTS:
%   map:          A parsed model structure generated by 
%                  'Transform_XML_to_Matlab_structure` function
%
%   model:        A COBRA model 
%
%   FBAsolution:  structure obtain from Flux balance analysis 
%
% OUTPUT:
%
%   map:          mew parsed file with the changes in the reactions   
%   Flux:         fluxes and normalized fluxes through all rxns 
%   fluxMap:      list of reactions carrying flux in the map + width value 
%     
% .. Author: J.Modamio. LCSB, Belval, Luxembourg, 18/07/2017.

% call function to give color name instead color code

Colors = Create_colors_map;

%% obtain fluxes in the map from FBA solution

Flux = FBAsolution.v;
idx = find(Flux); % indx reactions carrying fluxes in the model
rxn = model.rxns(idx,1);

% obtain list of reaction carrying fluxes and the value
Flux2 = [rxn,num2cell(Flux(idx,1))];
% 
% % find this reactions in the map and give them a flux and color  
% index = find(ismember(map.rxnName,rxn)); % find non-zeros elements 
% map2.rxnColor(index,1) = {Colors(color)} 

%% Normalize fluxes to give width

flux2(:,1)= FBAsolution.v;
%%%%%% normalise the flux values.
absFlux=abs(flux2);
rxnWidth=absFlux/max(absFlux);
% normalize the values in the descending order
rxnWidth(rxnWidth>=1)=8;   
rxnWidth(rxnWidth>0.8 & rxnWidth<1)=6;
rxnWidth(rxnWidth>0.5 & rxnWidth<=0.8)=5;
rxnWidth(rxnWidth>0.2 & rxnWidth<=0.5)=4;
rxnWidth(rxnWidth>1e-3 & rxnWidth<=0.2)=3;
rxnWidth(rxnWidth<1e-3)=1;
% normalized values
normalizedFlux=model.rxns;
normalizedFlux(:,2)= num2cell(rxnWidth(:,1));

%create 
Flux2 = [Flux2 num2cell(rxnWidth(idx,1))];
% add specific width to each reaction in the map based on the fluxes
for i = 1:length(map.rxnName)
    a = find(ismember(model.rxns,map.rxnName{i}));
    if isempty(a)
        map.rxnWidth{i} = 1;
    else
        map.rxnWidth{i} = rxnWidth(a);
    end
end

fluxMap = [map.rxnName map.rxnWidth];

%% unify the map. color nodes to white and reactions to grey 

% color lighter those reactions without flux 
id = Flux==0; %find rxn without flux 
rx = model.rxns(id,1);
index2 = ismember(map.rxnName,rx); % find non-zeros elements 
map.rxnColor(index2,1) = {Colors('LIGHTGRAY')}; % color all reactions without flux

% change all nodes color to white 
for i = 1:length(map.molColor)
    map.molColor(i,1) = {Colors('WHITE')};
end 

clear index2 rx id 
 
 %%  find rxns carring negative flux (metabolites are being uptaken) and give color 

 % give red color to reactions with negative fluxes (uptaken metabolites,
 % reactants) 
negative = find(FBAsolution.v <0);
negativeRxn = model.rxns(negative,1);
index2 = find(ismember(map.rxnName,negativeRxn)); 
map.rxnColor(index2,1) = {Colors('TOMATO')};

% give red color to metabolites being uptaken by the model 

% change colour base reactants 
baseR = map.rxnBaseReactantAlias(index2,1);
for i = 1:length(baseR) 
    a = baseR{i};
    id = ismember(map.molAlias,a);
    map.molColor(id,1) = {Colors('TOMATO')};
end
clear i a id
% change color of secondary reactants 
react = map.rxnReactantAlias(index2,1);
for i = 1:length(react) 
    a = react{i};
    id = ismember(map.molAlias,a);
    map.molColor(id,1) = {Colors('TOMATO')};
end
clear i a id a
clear index2 
 %%  find rxns carring positive flux (metabolites being produced or secreted) and give color 

% give red color to reactions with positive fluxes (secreted metabolites, products ) 

positive = find(FBAsolution.v > 0);
positiveRxn = model.rxns(positive,1);
index2 = find(ismember(map.rxnName,positiveRxn)); 
map.rxnColor(index2,1) = {Colors('DARKTURQUOISE')};
    
% give red color to metabolites being uptaken by the model 

% change colour base reactants 
baseP = map.rxnBaseProductAlias(index2,1);
for i = 1:length(baseP) 
    a = baseP{i};
    id = ismember(map.molAlias,a);
    map.molColor(id,1) = {Colors('DARKTURQUOISE')};
end
clear i a id
% change color of secondary reactants 
product = map.rxnProductAlias(index2,1);
for i = 1:length(product) 
    a = product{i};
    id = ismember(map.molAlias,a);
    map.molColor(id,1) = {Colors('DARKTURQUOISE')};
end
clear i a id


end 

% Transform_Matlab_structure_to_XML(xml,map,'Flux_direction_mito')
