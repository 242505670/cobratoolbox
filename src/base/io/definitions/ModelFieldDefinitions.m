% Field Definitions of the Cobra Model Structure.
% Definition information can be obtained from the Headers.

ProgramaticHeaders = {'Model Field', 'Xdim', 'Ydim', 'Evaluator', 'databaseid', 'qualifier', 'referenced Field', 'Default Value', 'DBPatterns'};

ProgramaticDefinitions = ...
    {'S', 'mets', 'rxns', 'isnumeric(x) || issparse(x)', NaN, NaN, NaN, 0, NaN ;...
    'b', 'mets', 1,'isnumeric(x)', NaN, NaN, NaN, 0, NaN ;...
    'csense', 'mets', 1,'ischar(x)', NaN, NaN, NaN, 'E', NaN;...
    'lb', 'rxns', 1,'isnumeric(x)', NaN, NaN, NaN, -1000, NaN ;...
    'ub', 'rxns', 1,'isnumeric(x)', NaN, NaN, NaN, 1000, NaN ;...
    'c', 'rxns', 1,'isnumeric(x)', NaN, NaN, NaN, 0, NaN ;...
    'osense', 1,1,'isnumeric(x)', NaN, NaN, NaN, -1, NaN ;...
    'rxns', 'rxns', 1,'iscell(x) && ~any(cellfun(@isempty, x)) && all(cellfun(@(y) ischar(y) , x))', NaN, NaN, NaN, '[''R'' num2str(i)]', NaN;...
    'mets', 'mets', 1,'iscell(x) && ~any(cellfun(@isempty, x)) && all(cellfun(@(y) ischar(y) , x))', NaN, NaN, NaN, '[''M'' num2str(i)]', NaN;...
    'genes', 'genes', 1,'iscell(x) && ~any(cellfun(@isempty, x)) && all(cellfun(@(y) ischar(y) , x))', NaN, NaN, NaN, '[''G'' num2str(i)]', NaN;...
    'rules', 'rxns', 1,'iscell(x) && all(cellfun(@(y) ischar(y) , x))', NaN, NaN, NaN, '''''', NaN;...
    'metCharges', 'mets', 1,'isnumeric(x)', NaN, NaN, NaN, 'NaN', NaN;...
    'metFormulas', 'mets', 1,'iscell(x) && all(cellfun(@(y) ischar(y) , x))', NaN, NaN, NaN, '''''', NaN;...
    'metSmiles', 'mets', 1,'iscell(x) && all(cellfun(@(y) ischar(y) , x))', NaN, NaN, NaN, '''''', NaN;...
    'metNames', 'mets', 1,'iscell(x) && all(cellfun(@(y) ischar(y) , x))', NaN, NaN, NaN, 'model.mets{i}', NaN;...
    'metNotes', 'mets', 1,'iscell(x) && all(cellfun(@(y) ischar(y) , x))', NaN, NaN, NaN, '''''', NaN;...
    'metHMDBID', 'mets', 1,'iscell(x) && all(cellfun(@(y) ischar(y) , x))', 'hmdb', 'is', 'mets', '''''', '^HMDB\d{5}$';...
    'metInChIString', 'mets', 1,'iscell(x) && all(cellfun(@(y) ischar(y) , x))', 'inchi', 'is', 'mets', '''''', '^InChI\=1S?\/[A-Za-z0-9]+(\+[0-9]+)?(\/[cnpqbtmsih][A-Za-z0-9\-\+\(\)\,\/]+)*$';...
    'metKEGGID', 'mets', 1,'iscell(x) && all(cellfun(@(y) ischar(y) , x))', 'kegg.compound;kegg', 'is', 'mets', '''''', '^C\d+$';...
    'metChEBIID', 'mets', 1,'iscell(x) && all(cellfun(@(y) ischar(y) , x))', 'chebi;obo.chebi', 'is', 'mets', '''''', '^CHEBI:\d+$';...
    'metPubChemID', 'mets', 1,'iscell(x) && all(cellfun(@(y) ischar(y) , x))', 'pubchem.compound', 'is', 'mets', '''''', '^\d+$';...
    'metMetaNetXID', 'mets', 1,'iscell(x) && all(cellfun(@(y) ischar(y) , x))', 'metnetx.chemical', 'is', 'mets', '''''', '^MNXM\d+$';...
    'description', 'NaN', 'NaN', 'ischar(x) || isstruct(x)', NaN, NaN, NaN, 'struct()', NaN;...
    'modelVersion', 'NaN', 'NaN', 'isstruct(x)', NaN, NaN, NaN, 'struct()', NaN;...
    'geneNames', 'genes', 1,'iscell(x) && all(cellfun(@(y) ischar(y) , x))', NaN, 'is', 'genes', 'model.genes{i}', NaN;...
    'geneEntrezID', 'genes', 1,'iscell(x) && all(cellfun(@(y) ischar(y) , x))', 'ncbigene', 'is;isEncodedBy', 'genes', '''''', '^\d+$';...
    'grRules', 'rxns', 1,'iscell(x) && all(cellfun(@(y) ischar(y) , x))', NaN, NaN, NaN, '''''', NaN;...
    'rxnGeneMat', 'rxns', 'genes', 'issparse(x) || isnumeric(x) || islogical(x)', NaN, NaN, NaN, 0, NaN ;...
    'rxnConfidenceScores', 'rxns', 1,'isnumeric(x) || iscell(x) && isnumeric(cellfun(str2num,x))', NaN, NaN, NaN, 0, NaN ;...
    'rxnNames', 'rxns', 1,'iscell(x) && all(cellfun(@(y) ischar(y) , x))', NaN, NaN, NaN, 'model.rxns{i}', NaN;...
    'rxnNotes', 'rxns', 1,'iscell(x) && all(cellfun(@(y) ischar(y) , x))', NaN, NaN, NaN, '''''', NaN;...
    'rxnECNumbers', 'rxns', 1,'iscell(x) && all(cellfun(@(y) ischar(y) , x))', 'ec-code', 'is', 'rxns', '''''', '^\d+\.-\.-\.-|\d+\.\d+\.-\.-|\d+\.\d+\.\d+\.-|\d+\.\d+\.\d+\.(n)?\d+$';...
    'rxnReferences', 'rxns', 1,'iscell(x) && all(cellfun(@(y) ischar(y) , x))', 'pubmed', 'isDescribedBy', 'rxns', '''''', '^\d+$';...
    'rxnKEGGID', 'rxns', 1,'iscell(x) && all(cellfun(@(y) ischar(y) , x))', 'kegg.reaction;kegg', 'is', 'rxns', '''''', '^R\d+$';...
    'subSystems', 'rxns', 1,'iscell(x) && all(cellfun(@(y) ischar(y) , x))', NaN, NaN, NaN, '''''', NaN;...
    'compNames', 'comps', 1,'iscell(x) && all(cellfun(@(y) ischar(y) , x))', NaN, NaN, NaN, 'model.comps{i}', NaN;...
    'comps', 'comps', 1,'iscell(x) && all(cellfun(@(y) ischar(y) , x))', NaN, NaN, NaN, '[''C'' num2str{i}]', NaN;...
    'proteinNames', 'genes', 1,'iscell(x) && all(cellfun(@(y) ischar(y) , x))', NaN, NaN, NaN, 'model.proteins{i}', NaN;...
    'proteins', 'genes', 1,'iscell(x) && all(cellfun(@(y) ischar(y) , x))', NaN, NaN, NaN, '[''COBRAProtein'' num2str(i)]', NaN};

ProgramaticModelFields = [ProgramaticHeaders; ProgramaticDefinitions];

DescriptionHeaders = {'Model Field', 'Dimension', 'Property Description', 'Field Description'};

DescriptiveDefinitions = {'Model Field', 'Dimension', 'Property Description', 'Field Description';...
'S', 'm x n', 'Sparse or Full Matrix of Double', 'The stoichiometric matrix containing the model structure (for large models a sparse format is suggested)';...
'mets', 'm x 1', 'Column Cell Array of Strings', 'Identifiers of the metabolites';...
'b', 'm x 1', 'Column Vector of Doubles', 'The coefficients of the constraints of the metabolites.';...
'csense', 'm x 1', 'Column Vector of Chars', 'The sense of the constraints represented by b, each row is either E (equality), L(less than) or G(greater than)';...
'rxns', 'n x 1', 'Column Cell Array of Strings', 'Identifiers for the reactions.';...
'lb', 'n x 1', 'Column Vector of Doubles', 'The lower bounds for fluxes through the reactions.';...
'ub', 'n x 1', 'Column Vector of Doubles', 'The upper bounds for fluxes through the reactions.';...
'c', 'n x 1', 'Column Vector of Doubles', 'The objective coefficient of the reactions.';...
'osense', 'n x 1', 'Double', 'The objective sense either -1 for maximisation or 1 for minimisation';...
'genes', 'g x 1', 'Column Cell Array of Strings', 'Identifiers of the genes in the model';...
'rules', 'g x 1', 'Column Cell Array of Strings', 'GPR rules in evaluateable format for each reaction ( e.g. "x(1) &#124; x(2) & x(3)", would indicate the first gene or the second... <Preview truncated at 128 characters>';...
'compNames', 'c x 1', 'Column Cell Array of Strings', 'Descriptions of the Compartments (compNames(m) is associated with comps(m))';...
'comps', 'c x 1', 'Column Cell Array of Strings', 'Symbols for compartments, can include Tissue information';...
'description', '?', 'String or Struct', 'Name of a file the model is loaded from.';...
'geneNames', 'g x 1', 'Column Cell Array of Strings', 'Full names of each corresponding genes.';...
'geneEntrezID', 'g x 1', 'Column Cell Array of Strings', 'Entrez IDs of genes';...
'grRules', 'n x 1', 'Column Cell Array of Strings', 'A string representation of the GPR rules defined in a readable format.';...
'metCharges', 'm x 1', 'Column Vector of Double', 'The charge of the respective metabolite (NaN if unknown)';...
'metChEBIID', 'm x 1', 'Column Cell Array of Strings', 'Formula for each metabolite in the ChEBI format.';...
'metFormulas', 'm x 1', 'Column Cell Array of Strings', 'Elemental formula for each metabolite.';...
'metHMDBID', 'm x 1', 'Column Cell Array of Strings', 'Formula for each metabolite in the HMDB format.';...
'metInChIString', 'm x 1', 'Column Cell Array of Strings', 'Formula for each metabolite in the InCHI strings format.';...
'metKEGGID', 'm x 1', 'Column Cell Array of Strings', 'Formula for each metabolite in the KEGG format.';...
'metPubChemID', 'm x 1', 'Column Cell Array of Strings', 'PubChem ID of each metabolite';...
'metMetaNetXID', 'm x 1', 'Column Cell Array of Strings', 'MetaNetX identifier of the metabolite';...
'metNames', 'm x 1', 'Column Cell Array of Strings', 'Full name of each corresponding metabolite.';...
'metNotes', 'm x 1', 'Column Cell Array of Strings', 'Formula for each metabolite in the PubChem format.';...
'metSmiles', 'm x 1', 'Column Cell Array of Strings', 'Formula for each metabolite in SMILES Format';...
'modelVersion', '?', 'Struct', 'The version of the model, Store FBC versions in the COBRA structure';...
'proteinNames', 'g x 1', 'Column Cell Array of Strings', 'Full Name for each Protein';...
'proteins', 'g x 1', 'Column Cell Array of Strings', 'Proteins associated with each reaction.';...
'rxnConfidenceScores', 'n x 1', 'Column Vector of double', 'Confidence scores for reaction presence (0-5, with 5 being the highest confidence)';...
'rxnECNumbers', 'n x 1', 'Column Cell Array of Strings', 'E.C. number for each reaction.';...
'rxnGeneMat', 'n x g ', 'Sparse or Full Matrix of Double or Boolean', 'Matrix with rows corresponding to reactions and columns corresponding to genes.';...
'rxnKEGGID', 'n x 1', 'Column Cell Array of Strings', 'Formula for each reaction in the KEGG format.';...
'rxnNames', 'n x 1', 'Column Cell Array of Strings', 'Full name of each corresponding reaction.';...
'rxnNotes', 'n x 1', 'Column Cell Array of Strings', 'Description of each corresponding reaction.';...
'rxnReferences', 'n x 1', 'Column Cell Array of Strings', 'Description of references for each corresponding reaction.';...
'subSystems', 'n x 1', 'Column Cell Array of Strings', 'subSystem assignment for each reaction'};

DescriptiveFieldDefinitions = [DescriptionHeaders;DescriptiveDefinitions];